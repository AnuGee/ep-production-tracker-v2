import React from "react";
import "./JobDetailModal.css";

export default function JobDetailModal({ job, onClose }) {
  if (!job) return null;

  const formatDate = (timestamp) => {
    try {
      return timestamp?.toDate().toLocaleString("th-TH") || "-";
    } catch {
      return "-";
    }
  };

  // ‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Current Step
  const getPreviousStepStatus = () => {
    if (!job.currentStep) return "-";
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    const workflowSteps = ["Sales", "Warehouse", "Production", "QC", "COA", "Account"];
    const currentStepIndex = workflowSteps.findIndex(
      step => step.toLowerCase() === job.currentStep.toLowerCase()
    );
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
    if (currentStepIndex <= 0 || currentStepIndex === -1) return "-";
    
    // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    const previousStep = workflowSteps[currentStepIndex - 1];
    
    // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    if (previousStep === "Sales") return "‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß";
    if (previousStep === "Warehouse") return job.status?.warehouse || "-";
    if (previousStep === "Production") return job.status?.production || "-";
    if (previousStep === "QC") return job.status?.qc_inspection || "-";
    if (previousStep === "COA") return job.status?.qc_coa || "-";
    
    return "-";
  };

  // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  const getPreviousStepName = () => {
    if (!job.currentStep) return "-";
    
    const workflowSteps = ["Sales", "Warehouse", "Production", "QC", "COA", "Account"];
    const currentStepIndex = workflowSteps.findIndex(
      step => step.toLowerCase() === job.currentStep.toLowerCase()
    );
    
    if (currentStepIndex <= 0 || currentStepIndex === -1) return "-";
    return workflowSteps[currentStepIndex - 1];
  };

  const rows = [
    { label: "Sales", status: "‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß", remark: job.remarks?.sales, time: formatDate(job.Timestamp_Sales) },
    { label: "Warehouse", status: job.status?.warehouse, remark: job.remarks?.warehouse, time: formatDate(job.Timestamp_Warehouse) },
    { label: "Production", status: job.status?.production, remark: job.remarks?.production, time: formatDate(job.Timestamp_Production) },
    { label: "QC", status: job.status?.qc_inspection, remark: job.remarks?.qc, time: formatDate(job.Timestamp_QC) },
    { label: "COA", status: job.status?.qc_coa, remark: null, time: null },
    { label: "Account", status: job.status?.account, remark: job.remarks?.account, time: formatDate(job.Timestamp_Account) },
  ];

  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  const previousStepStatus = getPreviousStepStatus();
  const previousStepName = getPreviousStepName();

  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <h2>üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô</h2>
        <p><strong>üì¶ Product:</strong> {job.product_name}</p>
        <p><strong>üë§ Customer:</strong> {job.customer}</p>
        <p><strong>üìÖ Delivery:</strong> {job.delivery_date}</p>
        <p><strong>üß™ Volume:</strong> {job.volume} KG</p>
        <p><strong>üî¢ Batch No:</strong> {job.batch_no || "-"}</p>
        
        {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° Current Step ‡πÅ‡∏•‡∏∞ Status */}
        <p><strong>üìç Current Step:</strong> {job.currentStep || "-"}</p>
        {previousStepStatus !== "-" && (
          <p>
            <strong>üìä Status:</strong> {previousStepStatus}{" "}
            <span className="status-department">({previousStepName})</span>
          </p>
        )}

        <table className="modal-table">
          <thead>
            <tr>
              <th>‡πÅ‡∏ú‡∏ô‡∏Å</th>
              <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
              <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
            </tr>
          </thead>
          <tbody>
            {rows.map((r) => (
              <tr key={r.label}>
                <td>{r.label}</td>
                <td>
                  {r.status
                    ? job.currentStep === r.label
                      ? `${r.status} (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£)`
                      : r.status
                    : "-"}
                </td>
                <td>{r.remark || "-"}</td>
                <td>{r.time || "-"}</td>
              </tr>
            ))}
          </tbody>
        </table>
        
        <button className="close-btn" onClick={onClose}>‚ùå ‡∏õ‡∏¥‡∏î</button>
      </div>
    </div>
  );
}
