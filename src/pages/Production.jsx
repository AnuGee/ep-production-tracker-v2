import React, { useEffect, useState } from "react";
import { db, timestamp } from "../firebase";
import {
  collection,
  getDocs,
  updateDoc,
  doc,
  serverTimestamp,
  arrayUnion,
} from "firebase/firestore";
import toast from "react-hot-toast";

export default function Production() {
  const [jobs, setJobs] = useState([]);
  const [selectedJobId, setSelectedJobId] = useState("");
  const [batchNo, setBatchNo] = useState("");
  const [productionStatus, setProductionStatus] = useState("");
  const [remark, setRemark] = useState("");
  const [showConfirm, setShowConfirm] = useState(false);

  useEffect(() => {
    const fetchJobs = async () => {
      const querySnapshot = await getDocs(collection(db, "production_workflow"));
      const data = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      const filtered = data.filter((job) => job.currentStep === "Production");
      setJobs(filtered);
    };

    fetchJobs();
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!selectedJobId || !batchNo || !productionStatus) {
      toast.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }
    setShowConfirm(true); // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î popup modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
  };

  const handleFinalSubmit = async () => {
    try {
      const jobRef = doc(db, "production_workflow", selectedJobId);

      let newStep = "Production";
      if (productionStatus === "‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à") newStep = "QC";
      if (productionStatus === "‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à") newStep = "Account";

      await updateDoc(jobRef, {
        batch_no: batchNo,
        production_status: productionStatus,
        production_remark: remark,
        currentStep: newStep,
        lastUpdated: serverTimestamp(),
        audit_logs: arrayUnion({
          step: "Production",
          field: "production_status",
          value: productionStatus,
          timestamp: timestamp(),
        }),
      });

      toast.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
      setSelectedJobId("");
      setBatchNo("");
      setProductionStatus("");
      setRemark("");
      setShowConfirm(false);
    } catch (error) {
      console.error("Error updating document: ", error);
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  return (
    <div className="page-container">
      <h2>üß™ <strong>Production - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</strong></h2>
      <form onSubmit={handleSubmit}>
        <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</label>
        <select
          value={selectedJobId}
          onChange={(e) => setSelectedJobId(e.target.value)}
          required
        >
          <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô --</option>
          {jobs.map((job) => (
            <option key={job.id} value={job.id}>
              {job.po_number} - {job.product_name} - {job.customer}
            </option>
          ))}
        </select>

        <label>üìò Batch No</label>
        <input
          type="text"
          value={batchNo}
          onChange={(e) => setBatchNo(e.target.value)}
          required
        />

        <label>üèóÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</label>
        <select
          value={productionStatus}
          onChange={(e) => setProductionStatus(e.target.value)}
          required
        >
          <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ --</option>
          <option value="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï</option>
          <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡∏•‡∏¥‡∏ï">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡∏•‡∏¥‡∏ï</option>
          <option value="‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à">‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à</option>
          <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏</option>
          <option value="‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à">‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à</option>
        </select>

        <label>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
        <input
          type="text"
          placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏≤‡∏Å‡∏°‡∏µ"
          value={remark}
          onChange={(e) => setRemark(e.target.value)}
        />

        <button type="submit" className="submit-btn">
          ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Production
        </button>
      </form>

      {/* ‚úÖ MODAL ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
      {showConfirm && (
        <div className="modal-overlay" onClick={() => setShowConfirm(false)}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <h3>üìã <strong>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</strong></h3>
            <ul style={{ marginTop: "1rem", textAlign: "left" }}>
              <li><strong>Batch No:</strong> {batchNo}</li>
              <li><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï:</strong> {productionStatus}</li>
              {remark && <li><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {remark}</li>}
            </ul>
            <div className="button-row">
              <button className="submit-btn" onClick={handleFinalSubmit}>
                ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
              </button>
              <button className="cancel-btn" onClick={() => setShowConfirm(false)}>
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
