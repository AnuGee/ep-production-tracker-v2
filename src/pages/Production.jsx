// src/pages/Production.jsx
import React, { useEffect, useState } from "react";
import { db } from "../firebase";
import {
  collection,
  getDocs,
  updateDoc,
  doc,
  serverTimestamp,
  addDoc,
  arrayUnion,
} from "firebase/firestore";
import toast from "react-hot-toast";
import "../styles/Responsive.css";

export default function Production() {
  const [jobs, setJobs] = useState([]);
  const [selectedJobId, setSelectedJobId] = useState("");
  const [status, setStatus] = useState("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï");
  const [batchNo, setBatchNo] = useState("");
  const [remark, setRemark] = useState("");

  useEffect(() => {
    fetchJobs();
  }, []);

  const fetchJobs = async () => {
    const snapshot = await getDocs(collection(db, "production_workflow"));
    const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    setJobs(data.filter((job) => job.currentStep === "Production"));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!selectedJobId) {
      toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
      return;
    }

    try {
      const job = jobs.find((j) => j.id === selectedJobId);
      const jobRef = doc(db, "production_workflow", selectedJobId);
      const nextStep = status === "‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à" ? "QC" : status === "‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à" ? "Account" : "Production";

      await updateDoc(jobRef, {
        batch_no: batchNo,
        currentStep: nextStep,
        "status.production": status,
        "remarks.production": remark || "",
        Timestamp_Production: serverTimestamp(),
        audit_logs: arrayUnion({
          step: "Production",
          field: "status.production",
          value: status,
          remark: remark || "",
          timestamp: new Date().toISOString(),
        }),
      });

      // üîî ‡πÄ‡∏û‡∏¥‡πà‡∏° Notification ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      let message = "";
      let department = "";
      if (nextStep === "QC") {
        message = `Production ‡∏ú‡∏•‡∏¥‡∏ï ${job.product_name} ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${job.customer} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢ QC`;
        department = "QC";
      } else if (nextStep === "Account") {
        message = `Production ‡∏ú‡∏•‡∏¥‡∏ï ${job.product_name} ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${job.customer} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ`;
        department = "Account";
      }

      if (department) {
        await addDoc(collection(db, "notifications"), {
          message,
          department,
          timestamp: serverTimestamp(),
          read: false,
        });

        await addDoc(collection(db, "notifications"), {
          message,
          department: "All",
          timestamp: serverTimestamp(),
          read: false,
        });
      }

      toast.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
      setSelectedJobId("");
      setStatus("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï");
      setBatchNo("");
      setRemark("");
      fetchJobs();
    } catch (error) {
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞");
    }
  };

  return (
    <div className="page-container">
      <h2>üè´ Production - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</h2>
      <form onSubmit={handleSubmit} className="form-grid">
        <div>
          <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô</label>
          <select
            value={selectedJobId}
            onChange={(e) => setSelectedJobId(e.target.value)}
            className="input-box"
          >
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
            {jobs.map((job) => (
              <option key={job.id} value={job.id}>
                {job.product_name} ({job.customer})
              </option>
            ))}
          </select>
        </div>

        <div>
          <label>‡πÄ‡∏•‡∏Ç Batch</label>
          <input
            type="text"
            value={batchNo}
            onChange={(e) => setBatchNo(e.target.value)}
            className="input-box"
          />
        </div>

        <div>
          <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</label>
          <select
            value={status}
            onChange={(e) => setStatus(e.target.value)}
            className="input-box"
          >
            <option>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï</option>
            <option>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡∏•‡∏¥‡∏ï</option>
            <option>‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à</option>
            <option>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏</option>
            <option>‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à</option>
          </select>
        </div>

        <div className="full-span">
          <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
          <input
            type="text"
            value={remark}
            onChange={(e) => setRemark(e.target.value)}
            className="input-box"
          />
        </div>

        <button type="submit" className="submit-btn full-span">
          ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠
        </button>
      </form>
    </div>
  );
}
