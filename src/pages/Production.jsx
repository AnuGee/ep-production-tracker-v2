import React, { useEffect, useState } from "react";
import { db } from "../firebase";
import {
  collection,
  doc,
  getDocs,
  updateDoc,
  serverTimestamp,
} from "firebase/firestore";
import toast from "react-hot-toast";
import "../styles/Responsive.css";

export default function Production() {
  const [jobs, setJobs] = useState([]);
  const [selectedJobId, setSelectedJobId] = useState("");
  const [batchNo, setBatchNo] = useState("");
  const [productionStatus, setProductionStatus] = useState("");
  const [remark, setRemark] = useState("");
  const [showConfirm, setShowConfirm] = useState(false);

  useEffect(() => {
    fetchJobs();
  }, []);

  const fetchJobs = async () => {
    const snapshot = await getDocs(collection(db, "production_workflow"));
    const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    const filtered = data.filter(
      (job) => job.currentStep === "Production"
    );
    setJobs(filtered);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!selectedJobId || !batchNo || !productionStatus) {
      toast.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      return;
    }
    setShowConfirm(true);
  };

  const handleFinalSubmit = async () => {
    try {
      const jobRef = doc(db, "production_workflow", selectedJobId);
      let nextStep = "Production";

      // üëá Logic ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏±‡πâ‡∏ô
      if (productionStatus === "‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à") {
        nextStep = "QC"; // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      } else if (productionStatus === "‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à") {
        nextStep = "QC"; // üìÑ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ COA
      }

      // üëá ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await updateDoc(jobRef, {
        batch_no: batchNo,
        "status.production": productionStatus,
        "remarks.production": remark,
        currentStep: nextStep,
        Timestamp_Production: serverTimestamp(),
      });

      // üëá ‡πÄ‡∏û‡∏¥‡πà‡∏° audit log
      const job = jobs.find((job) => job.id === selectedJobId);
      const auditLogs = job?.audit_logs || [];

      await updateDoc(jobRef, {
        audit_logs: [
          ...auditLogs,
          {
            step: "Production",
            field: "status.production",
            value: productionStatus,
            remark,
            timestamp: new Date().toISOString(),
          },
        ],
      });

      toast.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
      setSelectedJobId("");
      setBatchNo("");
      setProductionStatus("");
      setRemark("");
      setShowConfirm(false);
      fetchJobs();
    } catch (error) {
      toast.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    }
  };

  return (
    <div className="page-container">
      <h2>üß™ <strong>Production - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</strong></h2>

      <form onSubmit={handleSubmit} className="form-grid">
        <div className="form-group full-span">
          <label>üìã <strong>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</strong></label>
          <select
            value={selectedJobId}
            onChange={(e) => setSelectedJobId(e.target.value)}
            className="input-box"
          >
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --</option>
            {jobs.map((job) => (
              <option key={job.id} value={job.id}>
                {job.product_name} - {job.customer}
              </option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label>üÜî <strong>Batch No</strong></label>
          <input
            type="text"
            value={batchNo}
            onChange={(e) => setBatchNo(e.target.value)}
            className="input-box"
          />
        </div>

        <div className="form-group">
          <label>‚öôÔ∏è <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</strong></label>
          <select
            value={productionStatus}
            onChange={(e) => setProductionStatus(e.target.value)}
            className="input-box"
          >
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ --</option>
            <option value="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï</option>
            <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡∏•‡∏¥‡∏ï">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡∏•‡∏¥‡∏ï</option>
            <option value="‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à">‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à</option>
            <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏</option>
            <option value="‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à">‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à</option>
          </select>
        </div>

        <div className="form-group full-span">
          <label>üìù <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</strong></label>
          <input
            type="text"
            value={remark}
            onChange={(e) => setRemark(e.target.value)}
            className="input-box"
            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏≤‡∏Å‡∏°‡∏µ"
          />
        </div>

        <div className="full-span" style={{ marginTop: "1rem" }}>
          <button type="submit" className="submit-btn">
            ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Production
          </button>
        </div>
      </form>

      {/* ‚úÖ MODAL Confirm */}
      {showConfirm && (
        <div className="modal-overlay" onClick={() => setShowConfirm(false)}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <h3>üìã <strong>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</strong></h3>
            <ul style={{ textAlign: "left", marginTop: "1rem" }}>
              <li><strong>Batch No:</strong> {batchNo}</li>
              <li><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï:</strong> {productionStatus}</li>
              {remark && <li><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {remark}</li>}
            </ul>
            <div className="button-row">
              <button className="submit-btn" onClick={handleFinalSubmit}>
                ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
              </button>
              <button className="cancel-btn" onClick={() => setShowConfirm(false)}>
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
