// src/pages/Production.jsx
import React, { useEffect, useState } from "react";
import { db } from "../firebase";
import {
  collection,
  getDocs,
  doc,
  updateDoc,
  addDoc,
  serverTimestamp,
  arrayUnion,
} from "firebase/firestore";
import toast from "react-hot-toast";
import "../styles/Responsive.css";

export default function Production() {
  const [jobs, setJobs] = useState([]);
  const [selectedJob, setSelectedJob] = useState(null);
  const [batchNo, setBatchNo] = useState("");
  const [status, setStatus] = useState("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï");
  const [remark, setRemark] = useState("");

  useEffect(() => {
    fetchJobs();
  }, []);

  const fetchJobs = async () => {
    const snapshot = await getDocs(collection(db, "production_workflow"));
    const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    setJobs(data.filter((job) => job.currentStep === "Production"));
  };

  const handleSubmit = async () => {
    if (!selectedJob) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }

    const jobRef = doc(db, "production_workflow", selectedJob.id);

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
    let nextStep = "Production";
    let notifyMessage = "";
    let notifyDepartment = "";

    if (status === "‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à") {
      nextStep = "QC";
      notifyMessage = "Production ‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å QC";
      notifyDepartment = "QC";
    } else if (status === "‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à") {
      nextStep = "Account";
      notifyMessage = "Production ‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å Invoice ‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å Account";
      notifyDepartment = "Account";
    }

    await updateDoc(jobRef, {
      batch_no: batchNo || selectedJob.batch_no || "",
      currentStep: nextStep,
      "status.production": status,
      "remarks.production": remark || "",
      Timestamp_Production: serverTimestamp(),

      audit_logs: arrayUnion({
        step: "Production",
        field: "status.production",
        value: status,
        remark: remark || "",
        timestamp: new Date().toISOString(),
      }),
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Notification ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ nextStep ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    if (nextStep === "QC") {
  await addDoc(collection(db, "notifications"), {
    message: `Production ‡∏ú‡∏•‡∏¥‡∏ï ${selectedJob.product_name} ‡∏Ç‡∏≠‡∏á ${selectedJob.customer} ‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏Å QC`,
    department: "QC",
    createdAt: serverTimestamp(),
    read: false,
  });
}

if (newStep === "Account") {
  await addDoc(collection(db, "notifications"), {
    message: `Production ‡∏ú‡∏•‡∏¥‡∏ï ${selectedJob.product_name} ‡∏Ç‡∏≠‡∏á ${selectedJob.customer} ‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏£‡∏≠‡∏≠‡∏≠‡∏Å Invoice ‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏Å Account`,
    department: "Account",
    createdAt: serverTimestamp(),
    read: false,
  });
}


    toast.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡πâ‡∏ß");

    setSelectedJob(null);
    setBatchNo("");
    setStatus("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï");
    setRemark("");
    fetchJobs();
  };

  return (
    <div className="page-container">
      <h2>üè≠ <strong>Production - ‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</strong></h2>

      <div className="form-grid">
        <div>
          <label>üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</label>
          <select
            className="input-box"
            value={selectedJob?.id || ""}
            onChange={(e) => {
              const job = jobs.find((j) => j.id === e.target.value);
              setSelectedJob(job);
              setBatchNo(job?.batch_no || "");
            }}
          >
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô --</option>
            {jobs.map((job) => (
              <option key={job.id} value={job.id}>
                {job.product_name} - {job.customer}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label>üî¢ Batch Number</label>
          <input
            type="text"
            className="input-box"
            value={batchNo}
            onChange={(e) => setBatchNo(e.target.value)}
          />
        </div>

        <div>
          <label>‚öôÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</label>
          <select
            className="input-box"
            value={status}
            onChange={(e) => setStatus(e.target.value)}
          >
            <option>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï</option>
            <option>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡∏•‡∏¥‡∏ï</option>
            <option>‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à</option>
            <option>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏</option>
            <option>‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à</option>
          </select>
        </div>

        <div className="full-span">
          <label>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
          <input
            type="text"
            className="input-box"
            value={remark}
            onChange={(e) => setRemark(e.target.value)}
            placeholder="‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ñ‡πâ‡∏≤‡∏°‡∏µ"
          />
        </div>

        <button className="submit-btn full-span" onClick={handleSubmit}>
          ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
        </button>
      </div>
    </div>
  );
}
