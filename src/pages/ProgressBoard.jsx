import React, { useState } from "react";
import "../styles/Responsive.css";

export default function ProgressBoard({ jobs }) {
  const steps = ["Sales", "Warehouse", "Production", "QC", "Logistics", "Account"];
  
  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tooltip
  const [hoveredJob, setHoveredJob] = useState(null);
  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });

  const getStatusColor = (step, job) => {
    if (!job.status) return "#e5e7eb";

    const status = job.status;
    const currentStep = job.currentStep;

    if (job.currentStep === step) {
      return "#facc15"; // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥
    }

    switch (step) {
      case "Sales":
        return (job.product_name && job.po_number && job.volume && job.customer)
          ? "#4ade80"
          : "#e5e7eb";

      case "Warehouse":
        if (
          status.warehouse === "‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à" ||
          status.warehouse === "‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
        ) {
          return "#4ade80";
        }
        return "#e5e7eb";

      case "Production":
        if (status.production === "‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à") return "#4ade80";

        if (
          status.warehouse === "‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" &&
          ["QC", "COA", "Logistics", "Account", "Completed"].includes(currentStep)
        ) {
          return "#4ade80"; // ‚úÖ ‡∏Ç‡πâ‡∏≤‡∏° Production ‡πÑ‡∏õ QC
        }

        if (
          status.warehouse === "‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à" &&
          ["‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡∏•‡∏¥‡∏ï", "‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏"].includes(status.production)
        ) {
          return "#facc15";
        }

        if (
          status.qc_inspection === "‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡πà‡∏≤‡∏ô" &&
          status.production === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏à‡∏∏"
        ) {
          return "#facc15";
        }

        if (
          currentStep === "Warehouse" &&
          status.qc_inspection === "‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"
        ) {
          return "#e5e7eb"; // ‚ùå QC fail ‚Üí ‡∏Å‡∏•‡∏±‡∏ö Warehouse ‚Üí ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Production
        }

        return "#e5e7eb";

      case "QC":
        if (
          status.qc_inspection === "‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" &&
          status.qc_coa === "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß"
        ) {
          return "#4ade80";
        }
        if (
          ["Logistics", "Account", "Completed"].includes(currentStep) &&
          status.qc_inspection &&
          status.qc_coa
        ) {
          return "#4ade80";
        }
        if (
          ["‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à (‡∏£‡∏≠‡∏õ‡∏£‡∏±‡∏ö)", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à (Hold)"].includes(status.qc_inspection) ||
          status.qc_coa === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°"
        ) {
          return "#facc15";
        }
        return "#e5e7eb";

      case "Logistics": {
        const volume = Number(job.volume || 0);
        const delivered = (job.delivery_logs || []).reduce(
          (sum, d) => sum + Number(d.quantity || 0), 0
        );
      
        // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏•‡∏±‡∏Å: ‡∏ñ‡πâ‡∏≤ currentStep ‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á Account ‡∏´‡∏£‡∏∑‡∏≠ Completed ‡πÅ‡∏•‡πâ‡∏ß 
        // ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        if (["Account", "Completed"].includes(currentStep)) {
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
          if (delivered > 0) {
            return "#4ade80"; 
          }
          // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡πÄ‡∏•‡∏¢ ‡πÅ‡∏ï‡πà‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á Account/Completed ‡πÅ‡∏•‡πâ‡∏ß 
          // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
          return "#4ade80";
        }

        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö
        if (delivered >= volume) {
            return "#4ade80"; // ‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        }
        if (delivered > 0) {
            return "#facc15"; // ‡∏™‡πà‡∏á‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
        }
        return "#e5e7eb"; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á
      }

      case "Account":
        if (status.account === "Invoice ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß") return "#4ade80";
        if (status.account === "Invoice ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å") return "#facc15";
        return "#e5e7eb";

      default:
        return "#e5e7eb";
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Mouse Enter
  const handleMouseEnter = (job, event) => {
    setHoveredJob(job);
    const rect = event.currentTarget.getBoundingClientRect();
    setTooltipPosition({
      x: rect.left + rect.width / 2,
      y: rect.top - 10
    });
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Mouse Leave
  const handleMouseLeave = () => {
    setHoveredJob(null);
  };

  // ‚úÖ Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tooltip
  const JobTooltip = ({ job, position }) => {
    if (!job) return null;

    return (
      <div
        style={{
          position: "fixed",
          left: position.x,
          top: position.y,
          transform: "translateX(-50%) translateY(-100%)",
          backgroundColor: "rgba(0, 0, 0, 0.9)",
          color: "white",
          padding: "12px 16px",
          borderRadius: "8px",
          fontSize: "14px",
          zIndex: 1000,
          minWidth: "280px",
          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.3)",
          pointerEvents: "none"
        }}
      >
        <div style={{ marginBottom: "8px", fontWeight: "bold", borderBottom: "1px solid #444", paddingBottom: "6px" }}>
          ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô
        </div>
        
        <div style={{ display: "flex", flexDirection: "column", gap: "4px" }}>
          <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
            <span>üìÖ</span>
            <span style={{ fontWeight: "500" }}>PO Date:</span>
            <span>{job.po_date || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</span>
          </div>
          
          <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
            <span>üìÑ</span>
            <span style={{ fontWeight: "500" }}>PO Number:</span>
            <span>{job.po_number || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</span>
          </div>
          
          <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
            <span>üì¶</span>
            <span style={{ fontWeight: "500" }}>Product Name:</span>
            <span>{job.product_name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</span>
          </div>
          
          <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
            <span>‚öñÔ∏è</span>
            <span style={{ fontWeight: "500" }}>Volume:</span>
            <span>{job.volume ? `${job.volume} KG.` : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</span>
          </div>
          
          <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
            <span>üßë‚Äçüíº</span>
            <span style={{ fontWeight: "500" }}>Customer:</span>
            <span>{job.customer || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</span>
          </div>
          
          <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
            <span>üöö</span>
            <span style={{ fontWeight: "500" }}>Delivery Date:</span>
            <span>{job.delivery_date || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</span>
          </div>
        </div>
        
        {/* ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ä‡∏µ‡πâ‡∏•‡∏á */}
        <div
          style={{
            position: "absolute",
            bottom: "-6px",
            left: "50%",
            transform: "translateX(-50%)",
            width: 0,
            height: 0,
            borderLeft: "6px solid transparent",
            borderRight: "6px solid transparent",
            borderTop: "6px solid rgba(0, 0, 0, 0.9)"
          }}
        />
      </div>
    );
  };

  return (
    <div className="progress-table-wrapper">
      <table className="progress-table">
        <thead>
          <tr>
            <th>Product</th>
            {steps.map((step) => (
              <th key={step}>{step}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {jobs
            .filter((job) => {
              const po = job.po_number || "";
              const hasKG = po.includes("KG");
              const delivered = (job.delivery_logs || []).reduce(
                (sum, d) => sum + Number(d.quantity || 0),
                0
              );
              const volume = Number(job.volume || 0);
              
              // ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ KG ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ (‡πÅ‡∏ö‡πà‡∏á‡∏™‡πà‡∏á)
              if (hasKG) return true;
              
              // ‡∏Å‡∏£‡∏ì‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á
              if (delivered === 0) return true;
              
              // ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏ö‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
              if (delivered >= volume) return true;
              
              // ‡∏Å‡∏£‡∏ì‡∏µ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß
              if (job.currentStep === "Completed" || job.currentStep === "Account") return true;
              
              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ: ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
              if (delivered > 0) return true;
              
              return false;
            })
            .map((job) => {
              const po = job.po_number || "";
              const hasKG = po.includes("KG");
              const delivered = (job.delivery_logs || []).reduce(
                (sum, d) => sum + Number(d.quantity || 0),
                0
              );

              return (
                <tr key={`${job.id || job.docId}${job._isDeliveryLog ? `-${job._deliveryQuantity}` : ''}`}>
                  <td>
                    {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Mouse Events ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Product Label */}
                    <span 
                      className="product-label"
                      onMouseEnter={(e) => handleMouseEnter(job, e)}
                      onMouseLeave={handleMouseLeave}
                      style={{
                        cursor: "help",
                        padding: "4px 8px",
                        borderRadius: "4px",
                        transition: "background-color 0.2s ease",
                        display: "inline-block"
                      }}
                      onMouseOver={(e) => {
                        e.currentTarget.style.backgroundColor = "rgba(59, 130, 246, 0.1)";
                      }}
                      onMouseOut={(e) => {
                        e.currentTarget.style.backgroundColor = "transparent";
                      }}
                    >
                      üìÑ {
                        job._isDeliveryLog 
                          ? `${job.product_name}-${job._deliveryQuantity}KG`
                          : (hasKG ? po : (delivered > 0 ? `${job.product_name}-${delivered}KG` : job.product_name))
                      }
                    </span>
                  </td>
                  {steps.map((step) => (
                    <td key={step}>
                      <div
                        style={{
                          backgroundColor: getStatusColor(step, job),
                          height: "20px",
                          width: "110px",
                          borderRadius: "6px",
                          margin: "auto",
                        }}
                      ></div>
                    </td>
                  ))}
                </tr>
              );
            })}
        </tbody>
      </table>
      
      {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Tooltip ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Hover */}
      <JobTooltip job={hoveredJob} position={tooltipPosition} />
    </div>
  );
}

