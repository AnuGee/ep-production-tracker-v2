// src/pages/QC.jsx
import React, { useEffect, useState } from "react";
import { db } from "../firebase";
import {
  collection,
  getDocs,
  doc,
  updateDoc,
  serverTimestamp,
} from "firebase/firestore";
import toast from "react-hot-toast";
import "../styles/Responsive.css";

export default function QC() {
  const [jobs, setJobs] = useState([]);
  const [selectedInspectionJobId, setSelectedInspectionJobId] = useState("");
  const [selectedCoaJobId, setSelectedCoaJobId] = useState("");
  const [inspectionStatus, setInspectionStatus] = useState("");
  const [coaStatus, setCoaStatus] = useState("");
  const [inspectionRemark, setInspectionRemark] = useState("");
  const [coaRemark, setCoaRemark] = useState("");
  const [showConfirmInspection, setShowConfirmInspection] = useState(false);
  const [showConfirmCoa, setShowConfirmCoa] = useState(false);

  useEffect(() => {
    fetchJobs();
  }, []);

  const fetchJobs = async () => {
    const snapshot = await getDocs(collection(db, "production_workflow"));
    const data = snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));
    const filtered = data.filter((job) => job.currentStep === "QC");
    setJobs(filtered);
  };

  const handleSubmitInspection = (e) => {
    e.preventDefault();
    if (!selectedInspectionJobId || !inspectionStatus) {
      toast.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      return;
    }
    setShowConfirmInspection(true);
  };

  const handleSubmitCoa = (e) => {
    e.preventDefault();
    if (!selectedCoaJobId || !coaStatus) {
      toast.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ COA ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      return;
    }
    setShowConfirmCoa(true);
  };

  const handleFinalInspection = async () => {
    try {
      const job = jobs.find((j) => j.id === selectedInspectionJobId);
      const jobRef = doc(db, "production_workflow", selectedInspectionJobId);

      let nextStep = "QC";
      let waiting_for = "COA";

      if (inspectionStatus === "‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡πà‡∏≤‡∏ô") {
        nextStep = "Production"; // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ö‡∏£‡∏£‡∏à‡∏∏
        waiting_for = "";
      } else if (inspectionStatus === "‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô") {
        nextStep = "Warehouse"; // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        waiting_for = "";
      }

      await updateDoc(jobRef, {
        "status.qc_inspection": inspectionStatus,
        "remarks.qc_inspection": inspectionRemark,
        currentStep: nextStep,
        waiting_for,
        Timestamp_QC_Inspection: serverTimestamp(),
        audit_logs: [
          ...(job?.audit_logs || []),
          {
            step: "QC",
            field: "status.qc_inspection",
            value: inspectionStatus,
            remark: inspectionRemark,
            timestamp: new Date().toISOString(),
          },
        ],
      });

      toast.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß");
      setSelectedInspectionJobId("");
      setInspectionStatus("");
      setInspectionRemark("");
      setShowConfirmInspection(false);
      fetchJobs();
    } catch (error) {
      toast.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    }
  };

  const handleFinalCoa = async () => {
    try {
      const job = jobs.find((j) => j.id === selectedCoaJobId);
      const jobRef = doc(db, "production_workflow", selectedCoaJobId);

      let nextStep = "QC";
      if (coaStatus === "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß") {
        nextStep = "Account";
      }

      await updateDoc(jobRef, {
        "status.qc_coa": coaStatus,
        "remarks.qc_coa": coaRemark,
        currentStep: nextStep,
        waiting_for: "",
        Timestamp_QC_COA: serverTimestamp(),
        audit_logs: [
          ...(job?.audit_logs || []),
          {
            step: "QC",
            field: "status.qc_coa",
            value: coaStatus,
            remark: coaRemark,
            timestamp: new Date().toISOString(),
          },
        ],
      });

      toast.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ COA ‡πÅ‡∏•‡πâ‡∏ß");
      setSelectedCoaJobId("");
      setCoaStatus("");
      setCoaRemark("");
      setShowConfirmCoa(false);
      fetchJobs();
    } catch (error) {
      toast.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    }
  };

  return (
    <div className="page-container">
      <h2>üß¨ <strong>QC - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ COA</strong></h2>

      {/* üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
      <h3>üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
      <form onSubmit={handleSubmitInspection} className="form-grid">
        <div className="form-group full-span">
          <label>üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</label>
          <select
            value={selectedInspectionJobId}
            onChange={(e) => setSelectedInspectionJobId(e.target.value)}
            className="input-box"
          >
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --</option>
            {jobs
              .filter((job) => job.waiting_for === "Inspection")
              .map((job) => (
                <option key={job.id} value={job.id}>
                  {job.product_name} - {job.customer}
                </option>
              ))}
          </select>
        </div>

        <div className="form-group">
          <label>üîç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</label>
          <select
            value={inspectionStatus}
            onChange={(e) => setInspectionStatus(e.target.value)}
            className="input-box"
          >
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ --</option>
            <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à</option>
            <option value="‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡πà‡∏≤‡∏ô">‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡πà‡∏≤‡∏ô</option>
            <option value="‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô">‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô</option>
          </select>
        </div>

        <div className="form-group full-span">
          <label>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
          <input
            type="text"
            value={inspectionRemark}
            onChange={(e) => setInspectionRemark(e.target.value)}
            className="input-box"
          />
        </div>

        <div className="full-span" style={{ marginTop: "1rem" }}>
          <button type="submit" className="submit-btn">
            ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
          </button>
        </div>
      </form>

      {/* üìÑ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ COA */}
      <h3 style={{ marginTop: "2rem" }}>üìÑ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ COA</h3>
      <form onSubmit={handleSubmitCoa} className="form-grid">
        <div className="form-group full-span">
          <label>üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</label>
          <select
            value={selectedCoaJobId}
            onChange={(e) => setSelectedCoaJobId(e.target.value)}
            className="input-box"
          >
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --</option>
            {jobs
              .filter((job) => job.waiting_for === "COA")
              .map((job) => (
                <option key={job.id} value={job.id}>
                  {job.product_name} - {job.customer}
                </option>
              ))}
          </select>
        </div>

        <div className="form-group">
          <label>üìÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ COA</label>
          <select
            value={coaStatus}
            onChange={(e) => setCoaStatus(e.target.value)}
            className="input-box"
          >
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ --</option>
            <option value="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°</option>
            <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°</option>
            <option value="‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß">‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß</option>
          </select>
        </div>

        <div className="form-group full-span">
          <label>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
          <input
            type="text"
            value={coaRemark}
            onChange={(e) => setCoaRemark(e.target.value)}
            className="input-box"
          />
        </div>

        <div className="full-span" style={{ marginTop: "1rem" }}>
          <button type="submit" className="submit-btn">
            ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ COA
          </button>
        </div>
      </form>

      {/* ‚úÖ Confirm Modal Inspection */}
      {showConfirmInspection && (
        <div className="overlay" onClick={() => setShowConfirmInspection(false)}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <h3>üîç ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</h3>
            <ul style={{ textAlign: "left", marginTop: "1rem" }}>
              <li><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> {inspectionStatus}</li>
              {inspectionRemark && <li><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {inspectionRemark}</li>}
            </ul>
            <div className="button-row">
              <button className="submit-btn" onClick={handleFinalInspection}>
                ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
              </button>
              <button className="cancel-btn" onClick={() => setShowConfirmInspection(false)}>
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ‚úÖ Confirm Modal COA */}
      {showConfirmCoa && (
        <div className="overlay" onClick={() => setShowConfirmCoa(false)}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <h3>üìÑ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ COA</h3>
            <ul style={{ textAlign: "left", marginTop: "1rem" }}>
              <li><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> {coaStatus}</li>
              {coaRemark && <li><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {coaRemark}</li>}
            </ul>
            <div className="button-row">
              <button className="submit-btn" onClick={handleFinalCoa}>
                ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
              </button>
              <button className="cancel-btn" onClick={() => setShowConfirmCoa(false)}>
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
