// тЬЕ QC.jsx тАУ р╣Бр╕Бр╣Йр╣Др╕В logic р╣Гр╕лр╣Йр╣Бр╕вр╕Бр╕Зр╕▓р╕Щр╕Хр╕▓р╕бр╕кр╕Цр╕▓р╕Щр╕░ ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕┤р╕Щр╕Др╣Йр╕▓ р╣Бр╕ер╕░ ЁЯУД COA

import React, { useEffect, useState } from "react";
import { db } from "../firebase";
import {
  collection,
  getDocs,
  doc,
  updateDoc,
  serverTimestamp,
} from "firebase/firestore";
import toast from "react-hot-toast";
import "../styles/Responsive.css";

export default function QC() {
  const [jobs, setJobs] = useState([]);
  const [selectedInspectionJobId, setSelectedInspectionJobId] = useState("");
  const [selectedCoaJobId, setSelectedCoaJobId] = useState("");
  const [inspectionStatus, setInspectionStatus] = useState("");
  const [coaStatus, setCoaStatus] = useState("");
  const [inspectionRemark, setInspectionRemark] = useState("");
  const [coaRemark, setCoaRemark] = useState("");
  const [showConfirmInspection, setShowConfirmInspection] = useState(false);
  const [showConfirmCoa, setShowConfirmCoa] = useState(false);

  useEffect(() => {
    fetchJobs();
  }, []);

  const fetchJobs = async () => {
    const snapshot = await getDocs(collection(db, "production_workflow"));
    const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    setJobs(data);
  };

  const inspectionJobs = jobs.filter(
    (job) =>
      job.currentStep === "QC" &&
      job.status?.production === "р╕гр╕нр╕Ьр╕ер╕Хр╕гр╕зр╕И" &&
      job.status?.qc_inspection !== "skip"
  );

  const coaJobs = jobs.filter(
    (job) =>
      job.currentStep === "QC" &&
      job.status?.qc_coa !== undefined &&
      (job.status?.production === "р╕Ьр╕ер╕┤р╕Хр╣Ар╕кр╕гр╣Зр╕И" || job.status?.qc_inspection === "skip")
  );

  const handleSubmitInspection = (e) => {
    e.preventDefault();
    if (!selectedInspectionJobId || !inspectionStatus) {
      toast.error("тЭМ р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ");
      return;
    }
    setShowConfirmInspection(true);
  };

  const handleSubmitCoa = (e) => {
    e.preventDefault();
    if (!selectedCoaJobId || !coaStatus) {
      toast.error("тЭМ р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░ COA");
      return;
    }
    setShowConfirmCoa(true);
  };

  const handleConfirmInspection = async () => {
    const jobRef = doc(db, "production_workflow", selectedInspectionJobId);
    const nextStep =
      inspectionStatus === "р╕Хр╕гр╕зр╕Ир╕Ьр╣Ир╕▓р╕Щ"
        ? "Production"
        : inspectionStatus === "р╕Хр╕гр╕зр╕Ир╣Др╕бр╣Ир╕Ьр╣Ир╕▓р╕Щ"
        ? "Warehouse"
        : "QC";

    await updateDoc(jobRef, {
      "status.qc_inspection": inspectionStatus,
      "remarks.qc_inspection": inspectionRemark,
      currentStep: nextStep,
      Timestamp_QC: serverTimestamp(),
      audit_logs: [
        ...jobs.find((j) => j.id === selectedInspectionJobId)?.audit_logs || [],
        {
          step: "QC",
          field: "qc_inspection",
          value: inspectionStatus,
          remark: inspectionRemark,
          timestamp: new Date().toISOString(),
        },
      ],
    });

    toast.success("тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕кр╕Цр╕▓р╕Щр╕░р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з");
    setSelectedInspectionJobId("");
    setInspectionStatus("");
    setInspectionRemark("");
    setShowConfirmInspection(false);
    fetchJobs();
  };

  const handleConfirmCoa = async () => {
    const jobRef = doc(db, "production_workflow", selectedCoaJobId);
    const nextStep = coaStatus === "р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Юр╕гр╣Йр╕нр╕бр╣Бр╕ер╣Йр╕з" ? "Account" : "QC";

    await updateDoc(jobRef, {
      "status.qc_coa": coaStatus,
      "remarks.qc_coa": coaRemark,
      currentStep: nextStep,
      Timestamp_QC: serverTimestamp(),
      audit_logs: [
        ...jobs.find((j) => j.id === selectedCoaJobId)?.audit_logs || [],
        {
          step: "QC",
          field: "qc_coa",
          value: coaStatus,
          remark: coaRemark,
          timestamp: new Date().toISOString(),
        },
      ],
    });

    toast.success("тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕кр╕Цр╕▓р╕Щр╕░ COA р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з");
    setSelectedCoaJobId("");
    setCoaStatus("");
    setCoaRemark("");
    setShowConfirmCoa(false);
    fetchJobs();
  };

  return (
    <div className="page-container">
      <h2>ЁЯзм <strong>QC - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕┤р╕Щр╕Др╣Йр╕▓р╣Бр╕ер╕░р╣Ар╕нр╕Бр╕кр╕▓р╕г COA</strong></h2>

      {/* ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕┤р╕Щр╕Др╣Йр╕▓ */}
      <form onSubmit={handleSubmitInspection} className="form-grid">
        <h3>ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕┤р╕Щр╕Др╣Йр╕▓</h3>
        <div className="form-group full-span">
          <label>ЁЯУЛ <strong>р╣Ар╕ер╕╖р╕нр╕Бр╕гр╕▓р╕вр╕Бр╕▓р╕г</strong></label>
          <select value={selectedInspectionJobId} onChange={(e) => setSelectedInspectionJobId(e.target.value)} className="input-box">
            <option value="">-- р╣Ар╕ер╕╖р╕нр╕Бр╕Зр╕▓р╕Щ --</option>
            {inspectionJobs.map((job) => (
              <option key={job.id} value={job.id}>{job.product_name} - {job.customer}</option>
            ))}
          </select>
        </div>

        <div className="form-group full-span">
          <label>ЁЯФН <strong>р╕кр╕Цр╕▓р╕Щр╕░р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ</strong></label>
          <select value={inspectionStatus} onChange={(e) => setInspectionStatus(e.target.value)} className="input-box">
            <option value="">-- р╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░ --</option>
            <option value="р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕И">р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕И</option>
            <option value="р╕Хр╕гр╕зр╕Ир╕Ьр╣Ир╕▓р╕Щ">р╕Хр╕гр╕зр╕Ир╕Ьр╣Ир╕▓р╕Щ</option>
            <option value="р╕Хр╕гр╕зр╕Ир╣Др╕бр╣Ир╕Ьр╣Ир╕▓р╕Щ">р╕Хр╕гр╕зр╕Ир╣Др╕бр╣Ир╕Ьр╣Ир╕▓р╕Щ</option>
          </select>
        </div>

        <div className="form-group full-span">
          <label>ЁЯУЭ <strong>р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕ (р╕Цр╣Йр╕▓р╕бр╕╡)</strong></label>
          <input type="text" value={inspectionRemark} onChange={(e) => setInspectionRemark(e.target.value)} className="input-box" placeholder="р╕гр╕░р╕Ър╕╕р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕р╕лр╕▓р╕Бр╕бр╕╡" />
        </div>

        <div className="full-span">
          <button type="submit" className="submit-btn">тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ</button>
        </div>
      </form>

      {/* ЁЯУД р╣Ар╕Хр╕гр╕╡р╕вр╕бр╣Ар╕нр╕Бр╕кр╕▓р╕г COA */}
      <form onSubmit={handleSubmitCoa} className="form-grid">
        <h3>ЁЯУД р╣Ар╕Хр╕гр╕╡р╕вр╕бр╣Ар╕нр╕Бр╕кр╕▓р╕г COA</h3>
        <div className="form-group full-span">
          <label>ЁЯУЛ <strong>р╣Ар╕ер╕╖р╕нр╕Бр╕гр╕▓р╕вр╕Бр╕▓р╕г</strong></label>
          <select value={selectedCoaJobId} onChange={(e) => setSelectedCoaJobId(e.target.value)} className="input-box">
            <option value="">-- р╣Ар╕ер╕╖р╕нр╕Бр╕Зр╕▓р╕Щ --</option>
            {coaJobs.map((job) => (
              <option key={job.id} value={job.id}>{job.product_name} - {job.customer}</option>
            ))}
          </select>
        </div>

        <div className="form-group full-span">
          <label>ЁЯУД <strong>р╕кр╕Цр╕▓р╕Щр╕░ COA</strong></label>
          <select value={coaStatus} onChange={(e) => setCoaStatus(e.target.value)} className="input-box">
            <option value="">-- р╣Ар╕ер╕╖р╕нр╕Бр╕кр╕Цр╕▓р╕Щр╕░ --</option>
            <option value="р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Ар╕Хр╕гр╕╡р╕вр╕б">р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Ар╕Хр╕гр╕╡р╕вр╕б</option>
            <option value="р╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕Хр╕гр╕╡р╕вр╕б">р╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕Хр╕гр╕╡р╕вр╕б</option>
            <option value="р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Юр╕гр╣Йр╕нр╕бр╣Бр╕ер╣Йр╕з">р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Юр╕гр╣Йр╕нр╕бр╣Бр╕ер╣Йр╕з</option>
          </select>
        </div>

        <div className="form-group full-span">
          <label>ЁЯУЭ <strong>р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕ (р╕Цр╣Йр╕▓р╕бр╕╡)</strong></label>
          <input type="text" value={coaRemark} onChange={(e) => setCoaRemark(e.target.value)} className="input-box" placeholder="р╕гр╕░р╕Ър╕╕р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕р╕лр╕▓р╕Бр╕бр╕╡" />
        </div>

        <div className="full-span">
          <button type="submit" className="submit-btn">тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е COA</button>
        </div>
      </form>

      {/* тЬЕ Popup р╕вр╕╖р╕Щр╕вр╕▒р╕Щ */}
      {showConfirmInspection && (
        <div className="overlay" onClick={() => setShowConfirmInspection(false)}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <h3>ЁЯУЛ <strong>р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕┤р╕Щр╕Др╣Йр╕▓</strong></h3>
            <p><strong>р╕кр╕Цр╕▓р╕Щр╕░:</strong> {inspectionStatus}</p>
            {inspectionRemark && <p><strong>р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕:</strong> {inspectionRemark}</p>}
            <div className="button-row">
              <button className="submit-btn" onClick={handleConfirmInspection}>тЬЕ р╕вр╕╖р╕Щр╕вр╕▒р╕Щ</button>
              <button className="cancel-btn" onClick={() => setShowConfirmInspection(false)}>тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Б</button>
            </div>
          </div>
        </div>
      )}

      {showConfirmCoa && (
        <div className="overlay" onClick={() => setShowConfirmCoa(false)}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <h3>ЁЯУЛ <strong>р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е COA</strong></h3>
            <p><strong>р╕кр╕Цр╕▓р╕Щр╕░:</strong> {coaStatus}</p>
            {coaRemark && <p><strong>р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕:</strong> {coaRemark}</p>}
            <div className="button-row">
              <button className="submit-btn" onClick={handleConfirmCoa}>тЬЕ р╕вр╕╖р╕Щр╕вр╕▒р╕Щ</button>
              <button className="cancel-btn" onClick={() => setShowConfirmCoa(false)}>тЭМ р╕вр╕Бр╣Ар╕ер╕┤р╕Б</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
