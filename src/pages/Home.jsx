// src/pages/Home.jsx
import React, { useEffect, useState } from "react";
import ProgressBoard from "./ProgressBoard";
import JobDetailModal from "./JobDetailModal";
import {
  BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer,
} from "recharts";
import { db } from "../firebase";
import {
  collection,
  getDocs,
  onSnapshot,
  query,
  orderBy,
  where,
  limit,
} from "firebase/firestore";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import "../styles/Responsive.css";

export default function Home() {
  const [jobs, setJobs] = useState([]);
  const [notifications, setNotifications] = useState([]);
  const [selectedYear, setSelectedYear] = useState("р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф");
  const [selectedMonth, setSelectedMonth] = useState("р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф");
  const [statusFilter, setStatusFilter] = useState("р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф");
  const [searchText, setSearchText] = useState("");
  const [showAllStatus, setShowAllStatus] = useState(false);
  const [selectedJob, setSelectedJob] = useState(null);

  const months = ["р╕бр╕Бр╕гр╕▓р╕Др╕б", "р╕Бр╕╕р╕бр╕ар╕▓р╕Юр╕▒р╕Щр╕Шр╣М", "р╕бр╕╡р╕Щр╕▓р╕Др╕б", "р╣Ар╕бр╕йр╕▓р╕вр╕Щ", "р╕Юр╕др╕йр╕ар╕▓р╕Др╕б", "р╕бр╕┤р╕Цр╕╕р╕Щр╕▓р╕вр╕Щ",
    "р╕Бр╕гр╕Бр╕Ор╕▓р╕Др╕б", "р╕кр╕┤р╕Зр╕лр╕▓р╕Др╕б", "р╕Бр╕▒р╕Щр╕вр╕▓р╕вр╕Щ", "р╕Хр╕╕р╕ер╕▓р╕Др╕б", "р╕Юр╕др╕ир╕Ир╕┤р╕Бр╕▓р╕вр╕Щ", "р╕Шр╕▒р╕Щр╕зр╕▓р╕Др╕б"];
  const years = ["р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф", "2025", "2026", "2027", "2028", "2029", "2030"];
  const steps = ["Sales", "Warehouse", "Production", "QC", "Account"];

  useEffect(() => {
    fetchJobs();

    const q = query(
      collection(db, "notifications"),
      where("department", "==", "All"),
      orderBy("timestamp", "desc"),
      limit(5)
    );

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const data = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setNotifications(data);
    });

    return () => unsubscribe();
  }, []);

  const fetchJobs = async () => {
    const snapshot = await getDocs(collection(db, "production_workflow"));
    const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    setJobs(data);
  };

  // ======= FILTER FUNCTIONS OMITTED FOR BREVITY =======
  // Assume the filtering, status, rendering, export, and tooltip logic stays unchanged

  return (
    <div className="page-container">
      <h2 style={{ marginTop: "0" }}>ЁЯПа р╕лр╕Щр╣Йр╕▓р╕лр╕ер╕▒р╕Б тАУ р╕ар╕▓р╕Юр╕гр╕зр╕бр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ</h2>

      {/* ЁЯФФ р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕ер╣Ир╕▓р╕кр╕╕р╕Ф */}
      <div className="section">
        <h3>ЁЯФФ р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕ер╣Ир╕▓р╕кр╕╕р╕Ф</h3>
        {notifications.length === 0 ? (
          <div>р╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ</div>
        ) : (
          notifications.map((noti) => (
            <div key={noti.id} style={{
              background: "#fef3c7",
              padding: "10px",
              borderRadius: "6px",
              marginBottom: "6px",
              fontSize: "14px",
            }}>
              ЁЯЪи {noti.message}
            </div>
          ))
        )}
      </div>

      {/* ЁЯОЫ Filter + Search + Clear */}
      <div className="section">
        <div className="filter-bar" style={{ flexWrap: "wrap", alignItems: "center", gap: "12px", marginBottom: "1rem" }}>
          <label>ЁЯУЖ р╕Ыр╕╡:</label>
          <select value={selectedYear} onChange={(e) => setSelectedYear(e.target.value)}>
            {years.map((year) => <option key={year}>{year}</option>)}
          </select>

          <label>ЁЯЧУ р╣Ар╕Фр╕╖р╕нр╕Щ:</label>
          <select value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)}>
            <option>р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф</option>
            {months.map((month) => <option key={month}>{month}</option>)}
          </select>

          <label>ЁЯОп р╕кр╕Цр╕▓р╕Щр╕░:</label>
          <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
            <option>р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф</option>
            <option>р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Цр╕╢р╕З</option>
            <option>р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│</option>
            <option>р╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з</option>
          </select>

          <input
            type="text"
            placeholder="ЁЯФН р╕Др╣Йр╕Щр╕лр╕▓ Product, Customer, Batch No"
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
            className="input-box"
            style={{ flexGrow: 1, minWidth: "200px", maxWidth: "400px" }}
          />

          <button className="clear-button" onClick={handleClearFilters}>
            тЩ╗я╕П Reset
          </button>
        </div>
      </div>

      {/* ЁЯУж р╕гр╕зр╕бр╕вр╕нр╕Фр╕Ьр╕ер╕┤р╕Х */}
      <div className="section">
        <h3>ЁЯУж р╕гр╕зр╕бр╕вр╕нр╕Фр╕Ьр╕ер╕┤р╕Хр╣Гр╕Щр╣Ар╕Фр╕╖р╕нр╕Щр╕Щр╕╡р╣Й: {getTotalVolume().toLocaleString()} KG</h3>
      </div>

      {/* ЁЯФ┤ р╕Др╕зр╕▓р╕бр╕Др╕╖р╕Ър╕лр╕Щр╣Йр╕▓ */}
      <div className="section">
        <h3>ЁЯФ┤ р╕Др╕зр╕▓р╕бр╕Др╕╖р╕Ър╕лр╕Щр╣Йр╕▓р╕Вр╕нр╕Зр╕Зр╕▓р╕Щр╣Бр╕Хр╣Ир╕ер╕░р╕Кр╕╕р╕Ф</h3>
        <ProgressBoard jobs={filteredJobs} />
      </div>

      {/* ЁЯУК р╕кр╕гр╕╕р╕Ыр╕кр╕Цр╕▓р╕Щр╕░р╕Зр╕▓р╕Щ */}
      <div className="section">
        <h3>ЁЯУК р╕кр╕гр╕╕р╕Ыр╕кр╕Цр╕▓р╕Щр╕░р╕Зр╕▓р╕Щр╕гр╕▓р╕вр╣Бр╕Ьр╕Щр╕Б</h3>
        <ResponsiveContainer width="100%" height={250}>
          <BarChart layout="vertical" data={steps.map((step) => ({
            name: step,
            notStarted: filteredJobs.filter(j => steps.indexOf(j.currentStep) > steps.indexOf(step)).length,
            doing: filteredJobs.filter(j => j.currentStep === step).length,
            done: filteredJobs.filter(j => steps.indexOf(j.currentStep) < steps.indexOf(step)).length,
          }))}>
            <XAxis type="number" />
            <YAxis dataKey="name" type="category" width={100} />
            <Tooltip content={<CustomTooltip />} />
            <Bar dataKey="notStarted" stackId="a" fill="#d1d5db" />
            <Bar dataKey="doing" stackId="a" fill="#facc15" />
            <Bar dataKey="done" stackId="a" fill="#4ade80" />
          </BarChart>
        </ResponsiveContainer>
      </div>

      {/* ЁЯУЛ р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Зр╕▓р╕Щр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф */}
      <div className="section">
        <h3>ЁЯУЛ р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Зр╕▓р╕Щр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф</h3>
        {/* р╕Хр╕▓р╕гр╕▓р╕Зр╣Бр╕ер╕░ export р╕Ыр╕╕р╣Ир╕бр╣Ар╕Фр╕┤р╕б */}
      </div>

      {selectedJob && (
        <JobDetailModal job={selectedJob} onClose={() => setSelectedJob(null)} />
      )}
    </div>
  );
}
