// src/pages/Warehouse.jsx
import React, { useEffect, useState } from "react";
import { db } from "../firebase";
import {
  collection,
  getDocs,
  doc,
  updateDoc,
  serverTimestamp,
  arrayUnion,
  addDoc,
} from "firebase/firestore";
import toast from "react-hot-toast"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Toast
import "../styles/Responsive.css";

export default function Warehouse() {
  const [jobs, setJobs] = useState([]);
  const [selectedJob, setSelectedJob] = useState(null);
  const [stock, setStock] = useState("‡∏°‡∏µ");
  const [step, setStep] = useState("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏¥‡∏Å");
  const [remark, setRemark] = useState("");

  useEffect(() => {
    fetchJobs();
  }, []);

  const fetchJobs = async () => {
    const snapshot = await getDocs(collection(db, "production_workflow"));
    const data = snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));
    setJobs(data.filter((job) => job.currentStep === "Warehouse"));
  };

  const handleSubmit = async () => {
    if (!selectedJob) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }

    const jobRef = doc(db, "production_workflow", selectedJob.id);

    const newStep = step === "‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à" ? "Production" : "Warehouse";

    await updateDoc(jobRef, {
      currentStep: newStep,
      "status.warehouse": step,
      "remarks.warehouse": remark || "",
      Timestamp_Warehouse: serverTimestamp(),
      audit_logs: arrayUnion({
        step: "Warehouse",
        field: "status.warehouse",
        value: step,
        remark: remark || "",
        timestamp: new Date().toISOString(),
      }),
    });

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Notification ‡πÄ‡∏Ç‡πâ‡∏≤ Firestore
    if (newStep === "Production") {
  await addDoc(collection(db, "notifications"), {
    message: `Warehouse ‡πÄ‡∏ö‡∏¥‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ${selectedJob.product_name} ‡∏Ç‡∏≠‡∏á ${selectedJob.customer} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏Å Production`,
    department: "Production",
    createdAt: serverTimestamp(),
    read: false,
  });
}

    toast.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" + (newStep === "Production" ? " ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Production" : ""));

    setSelectedJob(null);
    setStock("‡∏°‡∏µ");
    setStep("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏¥‡∏Å");
    setRemark("");
    fetchJobs();
  };

  return (
    <div className="page-container">
      <h2>üì¶ <strong>Warehouse - ‡πÄ‡∏ö‡∏¥‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</strong></h2>

      <div className="form-grid">
        <div>
          <label>üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</label>
          <select
            className="input-box"
            value={selectedJob?.id || ""}
            onChange={(e) => {
              const job = jobs.find((j) => j.id === e.target.value);
              setSelectedJob(job);
            }}
          >
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô --</option>
            {jobs.map((job) => (
              <option key={job.id} value={job.id}>
                {job.product_name} - {job.customer}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label>üì¶ ‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</label>
          <select
            className="input-box"
            value={stock}
            onChange={(e) => setStock(e.target.value)}
          >
            <option>‡∏°‡∏µ</option>
            <option>‡πÑ‡∏°‡πà‡∏°‡∏µ</option>
          </select>
        </div>

        <div>
          <label>üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
          <select
            className="input-box"
            value={step}
            onChange={(e) => setStep(e.target.value)}
          >
            <option>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏¥‡∏Å</option>
            <option>Pending</option>
            <option>‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à</option>
          </select>
        </div>

        <div className="full-span">
          <label>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
          <input
            type="text"
            className="input-box"
            value={remark}
            onChange={(e) => setRemark(e.target.value)}
            placeholder="‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ñ‡πâ‡∏≤‡∏°‡∏µ"
          />
        </div>

        <button className="submit-btn full-span" onClick={handleSubmit}>
          ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        </button>
      </div>
    </div>
  );
}
